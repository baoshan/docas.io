// Generated by CoffeeScript 1.3.1
(function() {
  var exports, express, plural_commands, router, singular_commands, staticCache, static_;

  express = require('express');

  router = new express.Router();

  staticCache = express.staticCache();

  static_ = express["static"](__dirname + '/server');

  plural_commands = {
    get: ['statistics']
  };

  singular_commands = {
    get: ['statistics', 'recently_finished_tasks', 'failed_tasks', 'slowest_tasks', 'processing_tasks', 'workers'],
    post: ['reschedule', 'clear']
  };

  exports = module.exports = function(options) {
    var command, commands, fairy, method, _i, _j, _len, _len1;
    fairy = require('../.').connect(options);
    for (method in plural_commands) {
      commands = plural_commands[method];
      for (_i = 0, _len = commands.length; _i < _len; _i++) {
        command = commands[_i];
        router.route(method, "/api/queues/" + command, (function(command) {
          return function(req, res) {
            return fairy[command](function(err, results) {
              if (err) {
                return res.send(500, err.stack);
              }
              return res.send(results);
            });
          };
        })(command));
      }
    }
    for (method in singular_commands) {
      commands = singular_commands[method];
      for (_j = 0, _len1 = commands.length; _j < _len1; _j++) {
        command = commands[_j];
        console.log(command);
        router.route(method, "/api/queues/:name/" + command, (function(command) {
          return function(req, res) {
            var queue;
            queue = fairy.queue(req.params.name);
            return queue[command](function(err, results) {
              if (err) {
                return res.send(500, err.stack);
              }
              return res.send(results);
            });
          };
        })(command));
      }
    }
    console.log('returning');
    return function(req, res, next) {
      console.log(req);
      return router.middleware(req, res, function() {
        return staticCache(req, res, function() {
          return static_(req, res, next);
        });
      });
    };
  };

}).call(this);
